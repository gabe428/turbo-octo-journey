LiteServer Setup
    after using npm init in commandline to create your package.json and the index.html:

    1. installing node module lite-server for testing
        npm install lite-server

    2. add to package.json "start": "npm run lite"
    this is configuring a command for npm when npm start is entered into the -
        command line it will do action "npm run lite"
        furthermore lite is definded as "lite": "lite-server"

    3. Bootstrap: In order to use bootstrap, you must have popper and jquery
        when attempting to npm install boostrap you will get an error
        that the dependents are not installed, you must install them in the
        order of jquery > popper > Bootstrap

    4. In the index.html you specify the css stylesheet using "stylesheet"
        and href to specify the path to "stylesheet"
        note: the same specificications need to be made for jquery, popper,
        and bootstrap in the respective orders, this is done right below the
        footer in index.html

Getting Express set up:
    1.) mdkdir myapp, cd myapp
    2.) npm init
    3.) npm install express --save

Using express-generator to quickly set up an express project:
    1.) run npm install express-generator -g to install globally
    2.) run express --version to verify isntallation
    3.) now you can run the command express in the destination folder: This would install the framework with default
    settings into your current folder. This is probably
    a good start, but letâ€™s take a look at some configuration options first.
    4.) To add some configuration options you can start your project using: express --view=pug --git
            This will set up your project configured to use pug(NEW JADE) as your html template

Package.json
  1. The syntax is in JSON format where the key is the name of the package and
    the value is the version of the package to be used.
    npm uses the package.json file to specify the version of a package
    that your app depends on.
    The version number is in semver syntax which designates each sections
    with different meaning. semver is broken into three sections separated by a dot.
    major.minor.patch
    1.0.2
  2. So if you see ~1.0.2 it means to install version 1.0.2 or the latest patch
    version such as 1.0.4. If you see ^1.0.2 it means to install version 1.0.2 or
    the latest minor or patch version such as 1.1.0.
  3. >= means greater than or equal to specified V number etc.. <=, <, >
  I.E. :
      ~version "Approximately equivalent to version" See npm semver - Tilde Ranges & semver (7)
      ^version "Compatible with version" See npm semver - Caret Ranges & semver (7)
      version Must match version exactly
      >version Must be greater than version
      >=version etc
      <version
      <=version
      1.2.x 1.2.0, 1.2.1, etc., but not 1.3.0
